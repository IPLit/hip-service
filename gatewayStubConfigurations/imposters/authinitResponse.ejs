function(config) {
config.logger.info(config.request.body);
config.logger.info(config.request.path + " is called");
var reqBody = JSON.parse(config.request.body);
var reqId = reqBody.requestId;
var reqHealthId = reqBody.id;
var reqAuthMode = reqBody.authMode;
var token =  config.request.headers.Authorization;
var body1 ={
    "requestId":"3d839b9a-0479-46bd-a620-d9f885ad1110",
    "timestamp":"2021-03-11T12:33:21.7269Z",
    "auth": {
        "transactionId": "34830493-046a-4a2a-b525-826a4a2cb5ea",
        "mode": "MOBILE_OTP",
        "meta": {
          "hint": "string",
          "expiry": "2019-12-30T12:01:55Z"
            }
        },
    "resp": {
         "requestId": reqId
    }
};
var reqBodyOnFetchModes = JSON.stringify(body1);
var http = require('http');
var options = {
    method: 'POST',
    port: '9052',
    hostname: 'host.docker.internal',
    path: '/v0.5/users/auth/on-init',
    json: body1,
    headers: {
        'Content-Type': 'application/json',
        'Authorization': token,
        'content-length': reqBodyOnFetchModes.length,
        'X-HIP-ID': '10000005'
}
},
httpRequest = http.request(options, response => {
var body = JSON.parse(body1);
response.setEncoding('utf8');
response.on('data', chunk => {
body += chunk;
});
response.on('end', () => {
var stubResponse = {
statusCode: response.statusCode,
headers: response.headers,
body
};
config.logger.info('Successfully proxied: ' + JSON.stringify(stubResponse));
});
});
httpRequest.write(reqBodyOnFetchModes);
httpRequest.end();

return {
statusCode: '202',
headers: {
'Content-Type': 'application/json'
},
// this is the redacted response that would come from the openid connect mock server, but we need to replace the host in the url,
// so the response is copied here with the updated host and the only entry that is required
body: JSON.stringify(
{
"Request":'Accepted',
'code':'202'
}
)
};
}