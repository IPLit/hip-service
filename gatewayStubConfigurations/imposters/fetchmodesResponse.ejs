function(config) {

config.logger.info(config.request.body);
config.logger.info(config.request.path + " is called");
var reqBody = JSON.parse(config.request.body);
var reqId = reqBody.requestId;
var token =  config.request.headers.Authorization;
config.logger.info("Token: "+token);
config.logger.info("Header: "+JSON.stringify(config.request.headers));
var body1 ={
    "requestId": "3d839b9a-0479-46bd-a620-d9f885ad11e2",
    "timestamp": "2021-03-10T11:04:25.454Z",
    "auth": {
        "purpose": "KYC_AND_LINK",
        "modes": [
            "MOBILE_OTP",
            "AADHAAR_OTP"
        ]
    },
    "resp": {
        "requestId": reqId
    }
};
var reqBodyOnFetchModes = JSON.stringify(body1);
var http = require('http');
var options = {
    method: 'POST',
    port: '9052',
    hostname: 'host.docker.internal',
    path: '/v0.5/users/auth/on-fetch-modes',
    json: body1,
    headers: {
        'Content-Type': 'application/json',
        'Authorization': token,
        'content-length': reqBodyOnFetchModes.length,
        'X-HIP-ID': '10000005'
    }
},
httpRequest = http.request(options, response => {
    var body = JSON.parse(body1);
    response.setEncoding('utf8');
    response.on('data', chunk => {
        body += chunk;
    });
    response.on('end', () => {
        var stubResponse = {
            statusCode: response.statusCode,
            headers: response.headers,
            body
        };
        config.logger.info('Successfully proxied: ' + JSON.stringify(stubResponse));
    });
});
httpRequest.write(reqBodyOnFetchModes);
httpRequest.end();

return {
    statusCode: '202',
    headers: {
    'Content-Type': 'application/json'
},
// this is the redacted response that would come from the openid connect mock server, but we need to replace the host in the url,
// so the response is copied here with the updated host and the only entry that is required
body: JSON.stringify(
{
    "Request":'Accepted',
    'code':'202'
}
)
};
}